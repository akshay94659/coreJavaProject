
import java.awt.Component;
import java.awt.Desktop;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

public class Explore extends javax.swing.JFrame {

    int width = Toolkit.getDefaultToolkit().getScreenSize().width;
    int height = Toolkit.getDefaultToolkit().getScreenSize().height;
    ArrayList<PCinfo> al2;
    String request = "";

    public Explore(ArrayList<PCinfo> al2) {
        initComponents();
        setSize(width, height);
        jl1.setText("");
        this.al2 = al2;
        jl1.setText(al2.size() + " systems connected");
        Singlepanel sp[] = new Singlepanel[al2.size()];
        int x = 30, y = 60;

        for (int i = 0; i < al2.size(); i++) {
            sp[i] = new Singlepanel();
            sp[i].setBounds(x, y, 250, 250);
            sp[i].jl2.setText(al2.get(i).ip);
            sp[i].jl3.setText(al2.get(i).pcname);
            jp.add(sp[i]);

            final String IP = al2.get(i).ip;

            sp[i].addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        request = "Send Configuration";
                        new Thread(new client(IP)).start();
                    } else {
                        if (e.getButton() == 3) {
                            PopupMenu pop = new PopupMenu();
                            MenuItem mi1 = new MenuItem("Shutdown");
                            MenuItem mi2 = new MenuItem("Restart");
                            MenuItem mi3 = new MenuItem("LogOff");
                            MenuItem mi4 = new MenuItem("View Screen");

                            pop.add(mi1);
                            pop.add(mi2);
                            pop.add(mi3);
                            pop.add(mi4);

                            add(pop);
                            pop.show(Explore.this, e.getXOnScreen(), e.getYOnScreen());

                            mi1.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    request = "Shutdown";
                                    new Thread(new client(IP)).start();
                                }
                            });
                            mi2.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    request = "Restart";
                                    new Thread(new client(IP)).start();
                                }
                            });
                            mi3.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    request = "Logoff";
                                    new Thread(new client(IP)).start();
                                }
                            });
                            mi4.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    request = "View Screen";
                                    new Thread(new client(IP)).start();

                                }
                            });

                        }
                    }

                }

            });

            if (x < 800) {
                x = x + 270;
            } else {
                x = 30;
                y = y + 70;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jp = new javax.swing.JPanel();
        jl = new javax.swing.JLabel();
        jl1 = new javax.swing.JLabel();
        jp2 = new javax.swing.JPanel();
        j1 = new javax.swing.JLabel();
        j2 = new javax.swing.JLabel();
        j3 = new javax.swing.JLabel();
        j4 = new javax.swing.JLabel();
        j5 = new javax.swing.JLabel();
        j6 = new javax.swing.JLabel();
        j7 = new javax.swing.JLabel();
        j8 = new javax.swing.JLabel();
        j9 = new javax.swing.JLabel();
        j10 = new javax.swing.JLabel();
        j11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jp.setBackground(new java.awt.Color(255, 51, 51));
        jp.setBorder(new javax.swing.border.MatteBorder(null));
        jp.setToolTipText("");
        jp.setLayout(null);
        jp.add(jl);
        jl.setBounds(60, 30, 120, 0);

        jl1.setText("a");
        jp.add(jl1);
        jl1.setBounds(30, 10, 230, 50);

        getContentPane().add(jp);
        jp.setBounds(0, -20, 1530, 820);

        jp2.setBackground(new java.awt.Color(0, 102, 102));
        jp2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jp2.setLayout(null);

        j1.setText("jLabel1");
        jp2.add(j1);
        j1.setBounds(90, 30, 240, 200);

        j2.setText("IP Address    :");
        jp2.add(j2);
        j2.setBounds(50, 290, 110, 20);

        j3.setText("PC Name       :");
        jp2.add(j3);
        j3.setBounds(50, 350, 110, 20);

        j4.setText("OS                :");
        jp2.add(j4);
        j4.setBounds(50, 420, 120, 20);

        j5.setText("No of Processers :");
        jp2.add(j5);
        j5.setBounds(30, 490, 130, 20);

        j6.setText("RAM               :");
        jp2.add(j6);
        j6.setBounds(40, 560, 120, 20);
        jp2.add(j7);
        j7.setBounds(180, 290, 220, 20);
        jp2.add(j8);
        j8.setBounds(170, 350, 230, 30);
        jp2.add(j9);
        j9.setBounds(180, 420, 220, 20);
        jp2.add(j10);
        j10.setBounds(180, 490, 220, 30);
        jp2.add(j11);
        j11.setBounds(180, 560, 220, 30);

        jButton1.setText("Export to Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jp2.add(jButton1);
        jButton1.setBounds(110, 660, 140, 29);

        getContentPane().add(jp2);
        jp2.setBounds(1520, 0, 410, 820);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {

            File f1 = new File(System.getProperty("user.home") + "\\Controller Files");
            if (!f1.exists()) {
                f1.mkdir();
            }
            File f = new File(System.getProperty("user.home") + "\\Controller Files\\" + j2.getText() + ".xls");
            HSSFWorkbook workbook = new HSSFWorkbook();
            HSSFSheet sheet = workbook.createSheet("FirstSheet");

            HSSFRow row0 = sheet.createRow((short) 0);
            row0.createCell(0).setCellValue("ip : ");
            row0.createCell(1).setCellValue(j7.getText());

            HSSFRow row1 = sheet.createRow((short) 1);
            row1.createCell(0).setCellValue("pc name : ");
            row1.createCell(1).setCellValue(j8.getText());

            HSSFRow row2 = sheet.createRow((short) 2);
            row2.createCell(0).setCellValue("OS : ");
            row2.createCell(1).setCellValue(j9.getText());

            HSSFRow row3 = sheet.createRow((short) 3);
            row3.createCell(0).setCellValue("no.of prors");
            row3.createCell(1).setCellValue(j10.getText());
            HSSFRow row4 = sheet.createRow((short) 4);
            row4.createCell(0).setCellValue("Ram");
            row4.createCell(1).setCellValue(j11.getText());

            FileOutputStream fileOut = new FileOutputStream(f);
            workbook.write(fileOut);
            fileOut.close();
            //System.out.println("Your excel file has been generated!");
            int r = JOptionPane.showConfirmDialog(rootPane, "Excel File has been generated!!!!!!!\n Do you want to open? ");
            if (r == JOptionPane.YES_OPTION) {
                Desktop.getDesktop().open(f);
            }

    }//GEN-LAST:event_jButton1ActionPerformed

        catch (Exception e) {
            e.printStackTrace();

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Explore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Explore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Explore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Explore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new Explore().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel j1;
    private javax.swing.JLabel j10;
    private javax.swing.JLabel j11;
    private javax.swing.JLabel j2;
    private javax.swing.JLabel j3;
    private javax.swing.JLabel j4;
    private javax.swing.JLabel j5;
    private javax.swing.JLabel j6;
    private javax.swing.JLabel j7;
    private javax.swing.JLabel j8;
    private javax.swing.JLabel j9;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jl;
    private javax.swing.JLabel jl1;
    private javax.swing.JPanel jp;
    private javax.swing.JPanel jp2;
    // End of variables declaration//GEN-END:variables

    class client implements Runnable {

        String ip;

        client(String ip) {
            this.ip = ip;

        }

        @Override

        public void run() {
            try {

                Socket sock = new Socket(ip, 9000);
                DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
                DataInputStream dis = new DataInputStream(sock.getInputStream());

                if (request.equals("Send Configuration")) {
                    dos.writeBytes("Send Configuration\r\n");

                    String ip = dis.readLine();
                    String pcname = dis.readLine();
                    String os = dis.readLine();
                    String processor = dis.readLine();
                    String ram = dis.readLine();

                    j7.setText(ip);
                    j8.setText(pcname);
                    j9.setText(os);
                    j10.setText(processor + " processors");
                    j11.setText(Math.round(Long.parseLong(ram) / (1024.0 * 1024 * 1024)) + "" + " GB");
                    repaint();

                } else if (request.equals("Shutdown")) {
                    dos.writeBytes("Shutdown\r\n");
                } else if (request.equals("Restart")) {
                    dos.writeBytes("Restart\r\n");

                } else if (request.equals("Logoff")) {
                    dos.writeBytes("logoff\r\n");

                } else if (request.equals("View Screen")) {
                    dos.writeBytes("View Screen\r\n");
                    int sw = dis.readInt();
                    int sh = dis.readInt();

                    int mw = Toolkit.getDefaultToolkit().getScreenSize().width;
                    int mh = Toolkit.getDefaultToolkit().getScreenSize().height;
                    newframe nf = new newframe(ip);
                    nf.setVisible(true);
                    if (sw < mw && sh < mh) {
                        nf.setSize(sw, sh);
                        nf.sp1.setSize(sw, sh);
                        nf.lb3.setSize(sw, sh);

                    } else {
                        nf.setSize(mw, mh);
                        nf.sp1.setSize(mw, mh);
                        nf.lb3.setSize(sw, sh);
                    }

                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }
}
