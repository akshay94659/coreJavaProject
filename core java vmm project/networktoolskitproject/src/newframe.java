
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author simrat kaur gill
 */
public class newframe extends javax.swing.JFrame implements MouseMotionListener, MouseListener,KeyListener {

    DataOutputStream dos;

    String ip;

    public newframe(String ip) {
        initComponents();
        this.ip = ip;
        new Thread(new client(ip)).start();
        new Thread(new photoclient(ip)).start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        sp1 = new java.awt.ScrollPane();
        lb3 = new javax.swing.JLabel();

        jMenu1.setText("jMenu1");

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        lb3.setText("jLabel3");
        sp1.add(lb3);

        getContentPane().add(sp1);
        sp1.setBounds(10, 10, 830, 730);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(newframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(newframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(newframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(newframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new newframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    public javax.swing.JLabel lb3;
    public java.awt.ScrollPane sp1;
    // End of variables declaration//GEN-END:variables

    class client implements Runnable {

        String ip;

        client(String ip) {
            this.ip = ip;

        }

        @Override

        public void run() {
            try {

                Socket sock = new Socket(ip, 9000);
                dos = new DataOutputStream(sock.getOutputStream());
                DataInputStream dis = new DataInputStream(sock.getInputStream());
                lb3.addMouseMotionListener(newframe.this);
                lb3.addMouseListener(newframe.this);
                addKeyListener(newframe.this);

                dos.writeBytes("hello server\r\n");

                String s = dis.readLine();
                System.out.println(s);

            } catch (IOException ex) {
                Logger.getLogger(newframe.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    class photoclient implements Runnable {

        String ip;

        photoclient(String ip) {
            this.ip = ip;

        }

        @Override

        public void run() {
            try {

                Socket psock = new Socket(ip, 8500);
                DataOutputStream pdos = new DataOutputStream(psock.getOutputStream());
                DataInputStream pdis = new DataInputStream(psock.getInputStream());
                System.out.println("accepted1");

                while (true) {

                    pdos.writeBytes("send screenshot\r\n");

                    ByteArrayOutputStream baos = new ByteArrayOutputStream();

                    Long size = pdis.readLong();
                    byte b[] = new byte[10000];
                    int count = 0;
                    int r;

                    while (true) {

                        r = pdis.read(b, 0, 10000);
                        count = count + r;

                        baos.write(b, 0, r);
                        if (count == size) {
                            break;
                        }

                    }
                    pdos.writeBytes("file recieved\r\n");

                    lb3.setIcon(new ImageIcon(baos.toByteArray()));

                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }

    @Override
    public void mouseDragged(MouseEvent e) {
        try {
            dos.writeBytes("mouse dragged\r\n");
            dos.writeInt(e.getX());
            dos.writeInt(e.getY());

        } catch (IOException ex) {
            Logger.getLogger(newframe.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void mouseMoved(MouseEvent e) {
        try {
            dos.writeBytes("mouse move\r\n");
            dos.writeInt(e.getX());
            dos.writeInt(e.getY());

        } catch (IOException ex) {
            Logger.getLogger(newframe.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void mouseClicked(MouseEvent e) {

        try {
            if (e.getClickCount() == 2) {
                dos.writeBytes("double click\r\n");
                dos.writeInt(e.getX());
                dos.writeInt(e.getY());

            } else {
                dos.writeBytes("mouse clicked\r\n");
                dos.writeInt(e.getX());
                dos.writeInt(e.getY());
                dos.writeInt(e.getButton());
            }
        } catch (IOException ex) {
            Logger.getLogger(newframe.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

        try {
            dos.writeBytes("mouse released\r\n");

            dos.writeInt(e.getButton());
        } catch (IOException ex) {
            Logger.getLogger(newframe.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        try {
            dos.writeBytes("key pressed\r\n");
            dos.writeInt(e.getKeyCode());
        } catch (IOException ex) {
            Logger.getLogger(newframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        
        try {
            dos.writeBytes("key released\r\n");
            dos.writeInt(e.getKeyCode());
        } catch (IOException ex) {
            Logger.getLogger(newframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    
    
    
}
